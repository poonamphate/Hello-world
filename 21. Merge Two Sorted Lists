//Description : https://leetcode.com/problems/merge-two-sorted-lists/
//solution : https://www.programcreek.com/2012/12/leetcode-merge-two-sorted-lists-java/

import java.util.*; 
  
/* Link list node */
class Node  
{ 
    int data; 
    Node next; 
    Node(int d) {data = d; 
                 next = null;} 
} 
      
public class MergeLists  
{ 
Node head;  
  
/* Method to insert a node at  
   the end of the linked list */
public void addToTheLast(Node node)  
{ 
    if (head == null) 
    { 
        head = node; 
    } 
    else 
    { 
        Node temp = head; 
        while (temp.next != null) 
            temp = temp.next; 
        temp.next = node; 
    } 
} 
  
/* Method to print linked list */
void printList() 
{ 
    Node temp = head; 
    while (temp != null) 
    { 
        System.out.print(temp.data + " "); 
        temp = temp.next; 
    }  
    System.out.println(); 
} 
  
  
// Driver Code 
public static void main(String args[]) 
{ 
    /* Let us create two sorted linked 
       lists to test the methods  
       Created lists: 
           llist1: 5->10->15, 
           llist2: 2->3->20 
    */
    MergeLists llist1 = new MergeLists(); 
    MergeLists llist2 = new MergeLists(); 
      
    // Node head1 = new Node(5); 
    llist1.addToTheLast(new Node(5)); 
    llist1.addToTheLast(new Node(10)); 
    llist1.addToTheLast(new Node(15)); 
      
    // Node head2 = new Node(2); 
    llist2.addToTheLast(new Node(2)); 
    llist2.addToTheLast(new Node(3)); 
    llist2.addToTheLast(new Node(20)); 
      
      
    llist1.head = sortedMerge(llist1.head,  
                                        llist2.head); 
    llist1.printList();      
} 

  

/* Takes two lists sorted in  
increasing order, and splices  
their nodes together to make  
one big sorted list which is  
returned. */
static Node sortedMerge(Node n1, Node n2) 
{ 
      
    /* a dummy first node to  
       hang the result on */
    Node dummyNode = new Node(0); 
    Node n3 = dummyNode;
    
    while(n1 != null || n2 != null){
        if(n1 != null && n2 != null){
            if(n1.data > n2.data){
                n3.next = n1;
                n1 = n1.next;
            }
            else {
                n3.next = n2;
                n2 = n2.next;
            }
            n3 = n3.next;
        }
        
        else if(n1 == null){
            n3.next = n2;
            break;
        }
        
        else if(n2 == null){
            n3.next = n1;
            break;
        }
    }
    
    
    return dummyNode.next; 
} 
} 
