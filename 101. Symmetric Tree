// Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).https://leetcode.com/problems/symmetric-tree/
// Video : https://www.youtube.com/watch?v=8t4KCaDB108
//Solution : https://leetcode.com/problems/symmetric-tree/solution/
//Time complexity = O(n), S = O(n)

class Node{
	int data;
	Node left, right;
	
	Node(int data){
		this.data = data;
	}
}
public class BinaryTree {
	
	public static void main(String[] argsS) {
		BinaryTree tree = new BinaryTree();
		Node root = new Node(1);
		Node twoL = new Node(2);
		Node twoR = new Node(2);
		Node threeL = new Node(3);
		Node threeR = new Node(3);
		Node fourL = new Node(4);
		Node fourR = new Node(4);
		
		root.left = twoL; 
		root.right = twoR;
		
		twoL.left = threeL; 
		twoL.right = fourR;
		
		twoR.left = fourL; 
		twoR.right = threeR;
		
		printTree(root);
		System.out.println("\n"+isSymmetric(root));
	}
	
	static void printTree(Node root) {
		if(root != null) {
			printTree(root.left);
			System.out.print(root.data+"-->");
			printTree(root.right);
		}
	}
	
	static boolean isSymmetric(Node root) {
		if(root == null) {
			return false;
		}
		
		return isSymmetricUtil(root.left, root.right);
	}
	
	static boolean isSymmetricUtil(Node left, Node right) {
		if(left == null || right == null) {
			return left == right;
		}
		
		if(left.data!=right.data){
        		return false;
		}
		return isSymmetricUtil(left.left, right.right) && isSymmetricUtil(left.right, right.left);
	}
	
}
