//problem - https://leetcode.com/problems/number-of-islands/
//video - https://www.youtube.com/watch?v=o8S2bO3pmO4

/*Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. 
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.*/

public class Solution {
	public static void main(String[] args) {
		char[][] grid = {
							{'1','1','0'},
							{'1','0','1'},
							{'0','0','1'}
						};
		
		System.out.println("printing matrix");
		for(int i = 0; i<grid.length; i++) {
			for(int j = 0; j<grid[0].length; j++) {
				
				System.out.print(grid[i][j]+" ");
			}
			System.out.println();
		}
		
		int count = findIslands(grid);
		System.out.println("count = "+count);
	}
	
	static int findIslands(char[][] grid) {
		int count=0;
		
		for(int i = 0; i<grid.length; i++) {
			for(int j = 0; j<grid[0].length; j++) {
				count = count+dfs(grid, i, j);
			}
		}
		
		return count;
	}
	
	static int dfs(char[][] grid, int i, int j) {
		if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0') {
			return 0;
		}
		
		grid[i][j] = '0';
		dfs(grid, i+1, j);
		dfs(grid, i-1, j);
		dfs(grid, i, j+1);
		dfs(grid, i, j-1);
		return 1;
	}
}
