//description : https://leetcode.com/problems/valid-parentheses/
/*Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.*/

import java.util.*;

public class BalancedParenthesis{
    public static void main(String[] args){
        String s = "()[]{}";
        System.out.println(isValid(s));
    }
    
    static boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        
        for(int i = 0; i<s.length(); i++){
            if(s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '['){
                stack.push(s.charAt(i));
            }
            else{
                if(stack.isEmpty()){
                    return false;
                }
                if(!isValidPair(stack.pop(), s.charAt(i))){
                    return false;
                }
            }  
        }
        if(stack.isEmpty()){
                return true;
            }
        return false;
    }
    
    static boolean isValidPair(char ch1, char ch2){
        if(ch1 == '(' && ch2 == ')'){
            return true;
        }
        
        else if(ch1 == '{' && ch2 == '}'){
            return true;
        }
        
        else if(ch1 == '[' && ch2 == ']'){
            return true;
        }
        else return false;
    }
}
