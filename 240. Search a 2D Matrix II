//https://leetcode.com/problems/search-a-2d-matrix-ii/
/* Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.*/

//video - https://www.youtube.com/watch?v=ZhG1M_FzxgI
//https://www.geeksforgeeks.org/search-in-row-wise-and-column-wise-sorted-matrix/
//T = O(n)

public class MyFirstJavaProgram {

   public static void main(String []args) {
      System.out.println("Hello World"); // prints Hello World
      
      int[][] arr = { {10, 20, 30, 40}, 
                        {15, 25, 35, 45}, 
                        {27, 29, 37, 48}, 
                        {32, 33, 39, 50} };
                        
        int target = 30;
        
        System.out.println(isPresent(arr, target));
   }
   
   static boolean isPresent(int[][] arr, int target){
       int n = arr.length;
       if(target < arr[0][0] || target > arr[n-1][n-1] ){
           return false;
       }
       int i = 0, j = n-1;
       while(i < n && j>=0){
           if(target > arr[i][j]){
               i++;
           }
           else if(target < arr[i][j]){
               j--;
           }
           else{
               return true;
           }
       }
       
       return false;
   }
}
