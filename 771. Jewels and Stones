/*You're given strings J representing the types of stones that are jewels, and S representing the stones you have.  
Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.
The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so "a" 
is considered a different type of stone from "A".

Example 1:
Input: J = "aA", S = "aAAbbbb"
Output: 3
*/

/*Time complexity
Hash set takes O(1) to check if it contains an element.
So the total time complexity will be O(M+N), instead of O(MN)*/

class Solution {
    public int numJewelsInStones(String J, String S) {
        if(J == null || J.length() == 0 || S == null || S.length() == 0){
            return 0;
        }
        int res = 0;
        Set set = new HashSet();
        
        for(char j : J.toCharArray()){
            set.add(j);
        }
    
        for(char s : S.toCharArray()){
            if(set.contains(s)){
                res++;
            }
        }
        return res;
    }
}
