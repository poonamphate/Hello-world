import java.util.Arrays;
import java.util.HashMap;

//Given an array of integers, return indices of the two numbers such that they add up to a specific target.

/*Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
*/

//Time complexity - O(n), space complexity - O(n)

public class TwoSum {
	public static void main(String[] args) {
		int[] arr = {2, 7, 11, 15};
		int target = 9;
		
		int[] result = findTwoSum(arr, target);
		System.out.println(Arrays.toString(result));
	}
	
	static int[] findTwoSum(int[] arr, int target) {
		int complement = 0;
		HashMap<Integer, Integer> map = new HashMap<>();
		for(int i = 0; i<arr.length; i++) {
			complement = Math.abs(arr[i] - target);
			
			if(map.containsKey(complement)) {
				return new int[] {i, (int) map.get(complement)};
			}
			map.put(arr[i], i);
		}
		throw new IllegalArgumentException("numbers not found");
	}
}
