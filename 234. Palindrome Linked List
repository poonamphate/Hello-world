//Problem = Given a singly linked list, determine if it is a palindrome.
//video = https://www.youtube.com/watch?v=oZuR2-AKkXE

class Node{
	Node next;
	int data;
	
	Node(int data){
		this.data = data;
	}
}

public class PalindromeLinkedList {
	static Node head;
	
	public static void main(String[] args) {
		PalindromeLinkedList ll =new PalindromeLinkedList();
		head = new Node(1);
		Node two = new Node(2);
		Node three = new Node(3);
		Node four = new Node(2);
		Node five = new Node(1);
		
		head.next = two;
		two.next = three;
		three.next = four;
		four.next = five;
		
		ll.print(head);
		System.out.println(ll.isPalindrome(head));
	}
	
	public void print(Node head) {
		Node current = head;
		
		while(current != null) {
			System.out.print(current.data+"-->");
			current = current.next;
		}
		System.out.println();
	}
	
	public boolean isPalindrome(Node head) {
		if(head == null) {
			return false;
		}
		
		Node p = head;
		Node q = head;
		Node startSecond;
		while(true) {
			p = p.next.next;
			
			if(p == null){
				startSecond = q.next;
				break;
			}
			
			if(p.next == null) {
				startSecond = q.next.next;
				break;
			}
			
			q = q.next;
		}
		
		q.next = null;
		
		Node revHead = reverseLinkedList(startSecond);
		
		return isSame(head, revHead);
	}
	
	static Node reverseLinkedList(Node head) {
		Node current = head;
		Node prev = null;
		Node next = null;
		
		while(current != null) {
			next = current.next;
			current.next = prev;
			prev = current;
			current = next;
		}
		return prev;
	}
	
	static boolean isSame(Node node1, Node node2) {
		while(node1 != null && node2 != null) {
			if(node1.data != node2.data) {
				return false;
			}
			node1 = node1.next;
			node2 = node2.next;
		}
		
		return true;
	}
}
